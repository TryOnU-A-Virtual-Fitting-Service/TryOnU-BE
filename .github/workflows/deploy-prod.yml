# ThatzFit API 서버 배포 워크플로우
name: Deploy ThatzFit API to EC2

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 워크플로우 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # 2. 설정 파일 생성
      - name: Create application configuration files
        run: |
          # application.yml 생성
          echo '${{ secrets.APPLICATION_YML }}' > src/main/resources/application.yml
          
          # application-prod.yml 생성  
          echo '${{ secrets.APPLICATION_PROD_YML }}' > src/main/resources/application-prod.yml

      # 3. AWS 자격 증명 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 4. Amazon ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 5. Docker 이미지 빌드 및 ECR에 푸시 (고유 태그만 사용)
      - name: Build, tag, and push ThatzFit API image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: attentionplease/thatzfit-api
          IMAGE_TAG: ${{ github.sha }}-run-${{ github.run_attempt }}
        run: |
          # 고유한 커밋 해시 태그로만 이미지를 빌드합니다.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # 해당 고유 태그 하나만 푸시합니다.
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # 6. EC2에 접속하여 ThatzFit API 배포
      - name: Deploy ThatzFit API to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.API_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.API_EC2_PRIVATE_KEY }}
          script: |
            # ECR 로그인
            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            # 무중단 배포 진행
            /home/ec2-user/deploy.sh ${{ steps.build-image.outputs.image }}

  # Slack 알림
  notify-slack:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always() # 이전 작업의 성공/실패와 관계없이 항상 실행
    steps:
      # 배포 성공 시 알림
      - name: Send Slack Notification on Success
        if: needs.build-and-deploy.result == 'success' # build-and-deploy 작업이 성공했을 때만 실행
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "✅ API 서버 배포 성공!",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Repository:*\n${{ github.repository }}" },
                    { "type": "mrkdwn", "text": "*Branch:*\n${{ github.ref_name }}" },
                    { "type": "mrkdwn", "text": "*Commit:*\n<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.short_sha }}>" },
                    { "type": "mrkdwn", "text": "*Author:*\n${{ github.actor }}" }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      # 배포 실패 시 알림
      - name: Send Slack Notification on Failure
        if: needs.build-and-deploy.result != 'success' # build-and-deploy 작업이 성공하지 않았을 때(실패, 취소 등) 실행
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "❌ API 서버 배포 실패",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Repository:*\n${{ github.repository }}" },
                    { "type": "mrkdwn", "text": "*Branch:*\n${{ github.ref_name }}" },
                    { "type": "mrkdwn", "text": "*Commit:*\n<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.short_sha }}>" },
                    { "type": "mrkdwn", "text": "*Author:*\n${{ github.actor }}" }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

